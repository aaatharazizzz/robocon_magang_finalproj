#include <cstdio>
#include <algorithm>
#include <memory>

#include <rclcpp/rclcpp.hpp>

#include <sensor_msgs/msg/image.hpp>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>

int min_h = 0;
    int min_s;
    int min_v;
    int max_h;
    int max_s;
    int max_v;
    void on_min_h_thresh_trackbar(int newval, void *) {
    min_h = std::min(179, min_h);
    cv::setTrackbarPos("min_h", "mie_gacoan", newval);
    }


class Sim2025FollowBall : public rclcpp::Node {
public:
    Sim2025FollowBall();
    void Run();

private:
    

    cv::Mat image_frame;
    cv::Mat depth_frame;

    int h_min;
    int s_min;
    int v_min;
    int h_max;
    int s_max;
    int v_max;

    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr image_subscriber;
    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr depth_subscriber;
    void image_callback(const sensor_msgs::msg::Image::SharedPtr msg);
    void depth_callback(const sensor_msgs::msg::Image::SharedPtr msg);

}; 


Sim2025FollowBall::Sim2025FollowBall() : rclcpp::Node("follow_ball") {
    using namespace std::placeholders;
    this->declare_parameter("h_min", 0);
    this->declare_parameter("s_min", 0);
    this->declare_parameter("v_min", 0);
    this->declare_parameter("h_max", 29);
    this->declare_parameter("s_max", 96);
    this->declare_parameter("v_max", 255);

    

    
    //cv::setTrackbarPos("min_h", "mie_gacoan", )
    //cv::createTrackbar("min_s", "mie_gacoan", &min_s, 255);
    //cv::createTrackbar("min_v", "mie_gacoan", &min_v, 255);
    //cv::createTrackbar("max_h", "mie_gacoan", &max_h, 179);
    //cv::createTrackbar("max_s", "mie_gacoan", &max_s, 255);
    //cv::createTrackbar("max_v", "mie_gacoan", &max_v, 255);

    image_subscriber = this->create_subscription<sensor_msgs::msg::Image>(
        "depth_camera/image_raw",
        10,
        std::bind(&Sim2025FollowBall::image_callback, this, _1)
    );
    depth_subscriber = this->create_subscription<sensor_msgs::msg::Image>(
        "depth_camera/depth/image_raw",
        10,
        std::bind(&Sim2025FollowBall::depth_callback, this, _1)
    );
}

void Sim2025FollowBall::image_callback(const sensor_msgs::msg::Image::SharedPtr msg) {
    try {
        image_frame = cv_bridge::toCvShare(msg, "bgr8")->image;

    } catch(cv_bridge::Exception& e) {
        RCLCPP_ERROR(this->get_logger(), "cvbridge error : %s", e.what());
    }
}

void Sim2025FollowBall::depth_callback(const sensor_msgs::msg::Image::SharedPtr msg) {
    try {

    } catch(cv_bridge::Exception& e) {
        RCLCPP_ERROR(this->get_logger(), "cvbridge error : %s", e.what());
    }
}


void Sim2025FollowBall::Run() {
    rclcpp::Rate rate(60);

    while(rclcpp::ok()) {
        rclcpp::spin_some(this->get_node_base_interface());
        if(!image_frame.empty()) {
            h_min = this->get_parameter("h_min").as_int();
            s_min = this->get_parameter("s_min").as_int();
            v_min = this->get_parameter("v_min").as_int();
            h_max = this->get_parameter("h_max").as_int();
            s_max = this->get_parameter("s_max").as_int();
            v_max = this->get_parameter("v_max").as_int();
            cv::Mat grayframe, mask, output;
            cv::cvtColor(image_frame, grayframe, cv::COLOR_BGR2GRAY);
            std::vector<cv::Vec3f> circles;

            cv::inRange(image_frame, cv::Scalar(h_min, s_min, v_min), cv::Scalar(h_max, s_max, v_max), mask);
            cv::Mat inverted_mask = 255 - mask;
            cv::SimpleBlobDetector::Params blob_detector_params;
            cv::Ptr<cv::SimpleBlobDetector> blob_detector;
            
            std::vector<cv::KeyPoint> key_points;
                // Change thresholds
        blob_detector_params.minThreshold = 10;
        blob_detector_params.maxThreshold = 1080;

        // Filter by Area.
        blob_detector_params.filterByArea = true;
        blob_detector_params.minArea = 10;

        // Filter by Circularity
        blob_detector_params.filterByCircularity = true;
        blob_detector_params.minCircularity = 0.1;

        // Filter by Convexity
        blob_detector_params.filterByConvexity = true;
        blob_detector_params.minConvexity = 0;

        // Filter by Inertia
        blob_detector_params.filterByInertia = true;
        blob_detector_params.minInertiaRatio = 0.01;

                blob_detector = cv::SimpleBlobDetector::create(blob_detector_params);
                blob_detector->detect(inverted_mask, key_points);

            cv::drawKeypoints(image_frame, key_points, output, cv::Scalar(0, 255, 0), cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS);
            
        
            cv::imshow("Image", output);
            cv::imshow("Mask", mask);


            cv::waitKey(10);
        }
        
        rate.sleep();
    }
    
}

int main(int argc, char ** argv) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<Sim2025FollowBall>();
    node->Run();
    rclcpp::shutdown();
    printf("hello world sim2025_follow_ball package\n");
    return 0;
}
