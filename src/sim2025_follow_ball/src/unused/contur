#include <cstdio>
#include <algorithm>
#include <memory>

#include <rclcpp/rclcpp.hpp>

#include <sensor_msgs/msg/image.hpp>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>

int min_h = 0;
    int min_s;
    int min_v;
    int max_h;
    int max_s;
    int max_v;
    void on_min_h_thresh_trackbar(int newval, void *) {
    min_h = std::min(179, min_h);
    cv::setTrackbarPos("min_h", "mie_gacoan", newval);
    }


class Sim2025FollowBall : public rclcpp::Node {
public:
    Sim2025FollowBall();
    void Run();

private:
    

    cv::Mat image_frame;
    cv::Mat depth_frame;

    int h_min;
    int s_min;
    int v_min;
    int h_max;
    int s_max;
    int v_max;

    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr image_subscriber;
    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr depth_subscriber;
    void image_callback(const sensor_msgs::msg::Image::SharedPtr msg);
    void depth_callback(const sensor_msgs::msg::Image::SharedPtr msg);

}; 


Sim2025FollowBall::Sim2025FollowBall() : rclcpp::Node("follow_ball") {
    using namespace std::placeholders;
    this->declare_parameter("h_min", 0);
    this->declare_parameter("s_min", 0);
    this->declare_parameter("v_min", 0);
    this->declare_parameter("h_max", 29);
    this->declare_parameter("s_max", 96);
    this->declare_parameter("v_max", 255);

    

    
    //cv::setTrackbarPos("min_h", "mie_gacoan", )
    //cv::createTrackbar("min_s", "mie_gacoan", &min_s, 255);
    //cv::createTrackbar("min_v", "mie_gacoan", &min_v, 255);
    //cv::createTrackbar("max_h", "mie_gacoan", &max_h, 179);
    //cv::createTrackbar("max_s", "mie_gacoan", &max_s, 255);
    //cv::createTrackbar("max_v", "mie_gacoan", &max_v, 255);

    image_subscriber = this->create_subscription<sensor_msgs::msg::Image>(
        "depth_camera/image_raw",
        10,
        std::bind(&Sim2025FollowBall::image_callback, this, _1)
    );
    depth_subscriber = this->create_subscription<sensor_msgs::msg::Image>(
        "depth_camera/depth/image_raw",
        10,
        std::bind(&Sim2025FollowBall::depth_callback, this, _1)
    );
}

void Sim2025FollowBall::image_callback(const sensor_msgs::msg::Image::SharedPtr msg) {
    try {
        image_frame = cv_bridge::toCvShare(msg, "bgr8")->image;

    } catch(cv_bridge::Exception& e) {
        RCLCPP_ERROR(this->get_logger(), "cvbridge error : %s", e.what());
    }
}

void Sim2025FollowBall::depth_callback(const sensor_msgs::msg::Image::SharedPtr msg) {
    try {

    } catch(cv_bridge::Exception& e) {
        RCLCPP_ERROR(this->get_logger(), "cvbridge error : %s", e.what());
    }
}


void Sim2025FollowBall::Run() {
    rclcpp::Rate rate(60);

    while(rclcpp::ok()) {
        rclcpp::spin_some(this->get_node_base_interface());
        if(!image_frame.empty()) {
            h_min = this->get_parameter("h_min").as_int();
            s_min = this->get_parameter("s_min").as_int();
            v_min = this->get_parameter("v_min").as_int();
            h_max = this->get_parameter("h_max").as_int();
            s_max = this->get_parameter("s_max").as_int();
            v_max = this->get_parameter("v_max").as_int();
            cv::Mat grayframe, mask, output;
            cv::cvtColor(image_frame, grayframe, cv::COLOR_BGR2GRAY);
            std::vector<cv::Vec3f> circles;

            cv::inRange(image_frame, cv::Scalar(h_min, s_min, v_min), cv::Scalar(h_max, s_max, v_max), mask);
            cv::dilate(mask, mask, cv::Mat());
            cv::erode(mask, mask, cv::Mat());
            std::vector<std::vector<cv::Point>> contours;
            cv::findContours(mask.clone(), contours, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);
            std::vector<std::vector<cv::Point>> contours_poly(contours.size());
            std::vector<cv::Rect> bound_rect(contours.size());
            std::vector<cv::Point2f> centers(contours.size());
            std::vector<float> radius(contours.size());

            for(size_t i = 0; i < contours.size(); i++) {
                cv::approxPolyDP(contours[i], contours_poly[i], 3, true);
                bound_rect[i] = cv::boundingRect(contours_poly[i]);
                cv::minEnclosingCircle(contours_poly[i], centers[i], radius[i]);
            }
            output = image_frame.clone();

            for(size_t i = 0; i < contours.size(); i++) {
                cv::rectangle(output, bound_rect[i], cv::Scalar(0, 0, 255), 1);
                cv::circle(output, centers[i], radius[i], cv::Scalar(0, 255, 0), 1);

            }

            cv::imshow("Image", output);
            cv::imshow("Mask", mask);


            cv::waitKey(10);
        }
        
        rate.sleep();
    }
    
}

int main(int argc, char ** argv) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<Sim2025FollowBall>();
    node->Run();
    rclcpp::shutdown();
    printf("hello world sim2025_follow_ball package\n");
    return 0;
}
